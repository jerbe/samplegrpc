// Code generated by protoc-gen-go. DO NOT EDIT.
// source: im.proto

package im

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_ac173b7a2417c6d4, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Response struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_ac173b7a2417c6d4, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "im.Request")
	proto.RegisterType((*Response)(nil), "im.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IMClient is the client API for IM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IMClient interface {
	Sample(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ResponseStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (IM_ResponseStreamClient, error)
	RequestStream(ctx context.Context, opts ...grpc.CallOption) (IM_RequestStreamClient, error)
	BilateralStream(ctx context.Context, opts ...grpc.CallOption) (IM_BilateralStreamClient, error)
}

type iMClient struct {
	cc *grpc.ClientConn
}

func NewIMClient(cc *grpc.ClientConn) IMClient {
	return &iMClient{cc}
}

func (c *iMClient) Sample(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/im.IM/Sample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMClient) ResponseStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (IM_ResponseStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IM_serviceDesc.Streams[0], "/im.IM/ResponseStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &iMResponseStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IM_ResponseStreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type iMResponseStreamClient struct {
	grpc.ClientStream
}

func (x *iMResponseStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iMClient) RequestStream(ctx context.Context, opts ...grpc.CallOption) (IM_RequestStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IM_serviceDesc.Streams[1], "/im.IM/RequestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &iMRequestStreamClient{stream}
	return x, nil
}

type IM_RequestStreamClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type iMRequestStreamClient struct {
	grpc.ClientStream
}

func (x *iMRequestStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iMRequestStreamClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iMClient) BilateralStream(ctx context.Context, opts ...grpc.CallOption) (IM_BilateralStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IM_serviceDesc.Streams[2], "/im.IM/BilateralStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &iMBilateralStreamClient{stream}
	return x, nil
}

type IM_BilateralStreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type iMBilateralStreamClient struct {
	grpc.ClientStream
}

func (x *iMBilateralStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iMBilateralStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IMServer is the server API for IM service.
type IMServer interface {
	Sample(context.Context, *Request) (*Response, error)
	ResponseStream(*Request, IM_ResponseStreamServer) error
	RequestStream(IM_RequestStreamServer) error
	BilateralStream(IM_BilateralStreamServer) error
}

func RegisterIMServer(s *grpc.Server, srv IMServer) {
	s.RegisterService(&_IM_serviceDesc, srv)
}

func _IM_Sample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).Sample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.IM/Sample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).Sample(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _IM_ResponseStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IMServer).ResponseStream(m, &iMResponseStreamServer{stream})
}

type IM_ResponseStreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type iMResponseStreamServer struct {
	grpc.ServerStream
}

func (x *iMResponseStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _IM_RequestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IMServer).RequestStream(&iMRequestStreamServer{stream})
}

type IM_RequestStreamServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type iMRequestStreamServer struct {
	grpc.ServerStream
}

func (x *iMRequestStreamServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iMRequestStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IM_BilateralStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IMServer).BilateralStream(&iMBilateralStreamServer{stream})
}

type IM_BilateralStreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type iMBilateralStreamServer struct {
	grpc.ServerStream
}

func (x *iMBilateralStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iMBilateralStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _IM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "im.IM",
	HandlerType: (*IMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sample",
			Handler:    _IM_Sample_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ResponseStream",
			Handler:       _IM_ResponseStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RequestStream",
			Handler:       _IM_RequestStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BilateralStream",
			Handler:       _IM_BilateralStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "im.proto",
}

func init() { proto.RegisterFile("im.proto", fileDescriptor_im_ac173b7a2417c6d4) }

var fileDescriptor_im_ac173b7a2417c6d4 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc8, 0xcc, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xca, 0xcc, 0x55, 0x52, 0xe6, 0x62, 0x0f, 0x4a, 0x2d, 0x2c,
	0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe0, 0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0x95, 0x54, 0xb8, 0x38, 0x82, 0x52, 0x8b, 0x0b, 0xf2,
	0xf3, 0x8a, 0x53, 0x71, 0xab, 0x32, 0x3a, 0xc0, 0xc8, 0xc5, 0xe4, 0xe9, 0x2b, 0xa4, 0xca, 0xc5,
	0x16, 0x9c, 0x98, 0x5b, 0x90, 0x93, 0x2a, 0xc4, 0xad, 0x97, 0x99, 0xab, 0x07, 0x35, 0x5d, 0x8a,
	0x07, 0xc2, 0x81, 0x98, 0xa2, 0xc4, 0x20, 0xa4, 0xcf, 0xc5, 0x07, 0xe3, 0x05, 0x97, 0x14, 0xa5,
	0x26, 0xe6, 0xe2, 0x55, 0x6e, 0xc0, 0x28, 0xa4, 0xc7, 0xc5, 0x0b, 0x95, 0x24, 0x42, 0xbd, 0x06,
	0xa3, 0x90, 0x11, 0x17, 0xbf, 0x53, 0x66, 0x4e, 0x62, 0x49, 0x6a, 0x51, 0x62, 0x0e, 0x51, 0x3a,
	0x0c, 0x18, 0x9d, 0x44, 0xb8, 0x78, 0x92, 0xf3, 0x73, 0xf5, 0xb2, 0x52, 0x8b, 0x92, 0x52, 0xf5,
	0x32, 0x73, 0x9d, 0x98, 0x3c, 0x7d, 0x03, 0x18, 0x93, 0xd8, 0xc0, 0xc1, 0x65, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0xb2, 0x69, 0x60, 0x10, 0x3a, 0x01, 0x00, 0x00,
}
